{"version":3,"sources":["scripts/main.js"],"names":["BASE_URL","PHONES_EP","PHONE_EP","request","endpoint","fetch","then","response","ok","Error","json","allPhonesIds","getAllPhonesIds","phones","map","id","push","getPhoneDetails","getAllSuccessfulDetails","ids","Promise","allSettled","data","value","getThreeFastestDetails","all","race","renderPhones","slice","heading","headingClass","toLowerCase","list","phone","name","join","document","body","insertAdjacentHTML"],"mappings":";AAAA,aAEA,IAAMA,EAAW,4DAEXC,EAAY,eACZC,EAAW,WAEXC,EAAU,SAACC,GACRC,OAAAA,MAAML,EAAWI,GACrBE,KAAK,SAAAC,GACA,IAACA,EAASC,GACN,MAAA,IAAIC,MAAM,kBAGXF,OAAAA,EAASG,UAIhBC,EAAe,GAEfC,EAAkB,WACfT,OAAAA,EAAQF,GACZK,KAAK,SAAAO,GAGGF,OAFPE,EAAOC,IAAI,SAAA,GAAGC,IAAAA,EAAAA,EAAAA,GAASJ,OAAAA,EAAaK,KAAKD,KAElCJ,KAIPM,EAAkB,SAACF,GAChBZ,OAAAA,EAAWD,GAAAA,OAAAA,GAAWa,OAAAA,EAA7B,WAGIG,EAA0B,SAACC,GACxBC,OAAAA,QAAQC,WAAWF,EAAIL,IAAI,SAAAC,GAAME,OAAAA,EAAgBF,MACrDT,KAAK,SAAAgB,GAAQA,OAAAA,EAAKR,IAAI,SAAA,GAAeS,OAAZA,EAAAA,WAGxBC,EAAyB,SAACL,GACvBC,OAAAA,QAAQK,IAAI,CACjBL,QAAQM,KAAKP,EAAIL,IAAI,SAAAC,GAAME,OAAAA,EAAgBF,MAC3CK,QAAQM,KAAKP,EAAIL,IAAI,SAAAC,GAAME,OAAAA,EAAgBF,MAC3CK,QAAQM,KAAKP,EAAIL,IAAI,SAAAC,GAAME,OAAAA,EAAgBF,SAI/CH,IACGN,KAAKY,GACLZ,KAAK,SAAAO,GAGGF,OAFPgB,EAAa,iBAAkBd,GAExBF,IAERL,KAAKkB,GACLlB,KAAK,SAAAO,GACJc,EAAa,iBAAkBd,EAAOe,MAAM,GAAI,IAChDD,EAAa,gBAAiBd,KAGlC,IAAMc,EAAe,SAACE,EAAShB,GACzBiB,IAAAA,EAEID,OAAAA,EAAQE,eACT,IAAA,iBACHD,EAAe,iBACf,MAEG,IAAA,iBACHA,EAAe,iBACf,MAEG,IAAA,gBACHA,EAAA,cAOEE,IAAAA,EACQF,mBAAAA,OAAAA,EACYD,iCAAAA,OAAAA,EACpBhB,iBAAAA,OAAAA,EAAOC,IAAI,SAAAmB,GAGGA,MAAAA,4DAAAA,OAAAA,EAAMlB,GAGJkB,mEAAAA,OAAAA,EAAMC,KANN,mDASfC,KAAK,IAZZ,mBAgBAC,SAASC,KAAKC,mBAAmB,YAAaN","file":"main.b7008967.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst BASE_URL = 'https://mate-academy.github.io/phone-catalogue-static/api';\n\nconst PHONES_EP = '/phones.json';\nconst PHONE_EP = '/phones/';\n\nconst request = (endpoint) => {\n  return fetch(BASE_URL + endpoint)\n    .then(response => {\n      if (!response.ok) {\n        throw new Error('Request failed');\n      }\n\n      return response.json();\n    });\n};\n\nconst allPhonesIds = [];\n\nconst getAllPhonesIds = () => {\n  return request(PHONES_EP)\n    .then(phones => {\n      phones.map(({ id }) => allPhonesIds.push(id));\n\n      return allPhonesIds;\n    });\n};\n\nconst getPhoneDetails = (id) => {\n  return request(`${PHONE_EP}${id}.json`);\n};\n\nconst getAllSuccessfulDetails = (ids) => {\n  return Promise.allSettled(ids.map(id => getPhoneDetails(id)))\n    .then(data => data.map(({ value }) => value));\n};\n\nconst getThreeFastestDetails = (ids) => {\n  return Promise.all([\n    Promise.race(ids.map(id => getPhoneDetails(id))),\n    Promise.race(ids.map(id => getPhoneDetails(id))),\n    Promise.race(ids.map(id => getPhoneDetails(id))),\n  ]);\n};\n\ngetAllPhonesIds()\n  .then(getAllSuccessfulDetails)\n  .then(phones => {\n    renderPhones('All Successful', phones);\n\n    return allPhonesIds;\n  })\n  .then(getThreeFastestDetails)\n  .then(phones => {\n    renderPhones('First Received', phones.slice(1, -1));\n    renderPhones('Three Fastest', phones);\n  });\n\nconst renderPhones = (heading, phones) => {\n  let headingClass;\n\n  switch (heading.toLowerCase()) {\n    case 'first received':\n      headingClass = 'first-received';\n      break;\n\n    case 'all successful':\n      headingClass = 'all-successful';\n      break;\n\n    case 'three fastest':\n      headingClass = `first-three`;\n      break;\n\n    default:\n      break;\n  }\n\n  const list = `\n    <ul class=${headingClass}>\n    <h3 class=\"li-header\">${heading}</h3>\n      ${phones.map(phone => `\n          <li>\n              <p>\n                ID: ${phone.id}\n              </p>\n              <p>\n                Name: ${phone.name}\n              </p>\n          </li>\n      `).join('')}\n    </ul>\n  `;\n\n  document.body.insertAdjacentHTML('beforeend', list);\n};\n"]}